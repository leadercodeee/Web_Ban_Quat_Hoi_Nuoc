package com.example.backend.controller;

import com.example.backend.DAO.UserKeyDAO;
import com.example.backend.models.User;
import com.example.backend.utils.KeyUtil;

import jakarta.servlet.ServletException;
import jakarta.servlet.annotation.WebServlet;
import jakarta.servlet.http.HttpServlet;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;
import jakarta.servlet.http.HttpSession;

import java.io.IOException;
import java.security.KeyPair;

@WebServlet(name = "ResetKeyController", urlPatterns = {"/reset-key"})
public class ResetKeyController extends HttpServlet {

    private final UserKeyDAO userKeyDAO = new UserKeyDAO();

    @Override
    protected void doPost(HttpServletRequest request, HttpServletResponse response)
            throws ServletException, IOException {

        HttpSession session = request.getSession(false);
        if (session == null || session.getAttribute("user") == null) {
            response.sendRedirect("auth.jsp");
            return;
        }

        User user = (User) session.getAttribute("user");

        try {
            // X√≥a kh√≥a c≈©
            userKeyDAO.deleteKeyByUserId(user.getId());

            // T·∫°o c·∫∑p kh√≥a m·ªõi
            KeyPair keyPair = KeyUtil.generateKeyPair();

            // L∆∞u kh√≥a m·ªõi v√†o database (ƒë√£ chuy·ªÉn Base64 b√™n trong)
         //   userKeyDAO.saveUserKey(user.getId(), keyPair.getPrivate(), keyPair.getPublic());

            // Chuy·ªÉn kh√≥a sang ƒë·ªãnh d·∫°ng PEM ƒë·ªÉ hi·ªÉn th·ªã / download d·ªÖ d√†ng
            String privateKeyPEM = toPEM("PRIVATE KEY", keyPair.getPrivate().getEncoded());
            String publicKeyPEM = toPEM("PUBLIC KEY", keyPair.getPublic().getEncoded());

            // ƒê∆∞a d·ªØ li·ªáu l√™n request
            request.setAttribute("privateKeyPEM", privateKeyPEM);
            request.setAttribute("publicKeyPEM", publicKeyPEM);
            request.setAttribute("message", "üîë Kh√≥a ƒë√£ ƒë∆∞·ª£c t·∫°o l·∫°i th√†nh c√¥ng.");

            // Forward sang trang hi·ªÉn th·ªã kh√≥a (v√≠ d·ª• showKey.jsp)
            request.getRequestDispatcher("showKey.jsp").forward(request, response);

        } catch (Exception e) {
            throw new ServletException("L·ªói khi reset kh√≥a v√† t·∫°o m·ªõi", e);
        }
    }

    // H√†m h·ªó tr·ª£ chuy·ªÉn byte[] key th√†nh PEM format string
    private String toPEM(String type, byte[] encodedKey) {
        String base64 = java.util.Base64.getMimeEncoder(64, new byte[]{'\n'}).encodeToString(encodedKey);
        return "-----BEGIN " + type + "-----\n" + base64 + "\n-----END " + type + "-----";
    }
}
